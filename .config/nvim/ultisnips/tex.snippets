global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'
def pythontex():
	pythontex_cmds = ['py','pyc','pys','pyb','pyv','pycon','pythontexcustomc']
	pythontex_envs = ['pycode','pysub','pyverbatim','pyblock','pyconsole','pythontexcustomcode']
	try:
		name_cmd = vim.eval("vimtex#cmd#get_current()")['name'][1:]
		return name_cmd in pythontex_cmds
	except:
		try:
			name_env = vim.eval("vimtex#env#get_surrounding('normal')")[0]['name']
			return name_env in pythontex_envs
		except:
			return False
endglobal

priority 100

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

# =====================
# custom snippets begin
# =====================

priority 10

snippet ,` "\begin{minted} / \end{minted}" bA
\\begin{minted}[frame=single]{$1}
\\end{minted}
endsnippet

snippet ,m "\item" bA
\item $1
endsnippet

snippet ,k "\usepackage{}" bA
\\usepackage$2{$1}$0
endsnippet

snippet ,1 "\part{}" bA
\\part{$1}
endsnippet

snippet ,2 "\chapter{}" bA
\\chapter{$1}
endsnippet

snippet ,3 "section{}" bA
\\section{$1}
endsnippet

snippet ,4 "\subsection{}" bA
\\subsection{$1}
endsnippet

snippet ,5 "\subsubsection{}" bA
\\subsubsection{$1}
endsnippet

snippet ,6 "\paragraph{}" bA
\\paragraph{$1}
endsnippet

snippet ,7 "\subparagraph{}" bA
\\subparagraph{$1}
endsnippet

snippet ,c "\verb``" wA
\\verb\`$1\`$0
endsnippet

snippet ,d "``''" wA
\`\`$1''$0
endsnippet

snippet ,s "`'" wA
\`$1'$0
endsnippet

snippet ,a "\textbf{}" wA
\\textbf{${1:${VISUAL}}}$0
endsnippet

snippet ,b "begin{} / end{}" bA
\\begin{$1}$0
\\end{$1}
endsnippet

snippet ,i "\textit{}" wA
\\textit{${1:${VISUAL}}}$0
endsnippet

snippet ,u "\uline{} (\usepackage[normalem]{ulem})" wA
\\uline{${1:${VISUAL}}}$0
endsnippet

snippet ,n "\emph{}" wA
\\emph{${1:${VISUAL}}}$0
endsnippet

snippet ,l "\href{}{}" wA
\\href{$1}{$2}$0
endsnippet

snippet ,f "\footnote{}" wA
\\footnote{${1:${VISUAL}}}$0
endsnippet

snippet ,t "\citet{} (\usepackage{natbib})" wA
\\citet{${1:${VISUAL}}}$0
endsnippet

snippet ,p "\citep{} (\usepackage{natbib})" wA
\\citep{${1:${VISUAL}}}$0
endsnippet

snippet ,, "\{}" wA
\\$1{$2}
endsnippet

snippet ,j "\py{} (\usepackae{pythontex})" wA
\\py{${1:${VISUAL}}} $0
endsnippet

snippet "be(gin)?( (\S+))?" "begin{} / end{}" br
\begin{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "something"`}}
	${2:${VISUAL}}
\end{$1}$0
endsnippet

# ====================
# custom snippets end
# ====================

priority 200
context "pythontex()"
snippet p "print something"
print(${1:${VISUAL}})
endsnippet

context "pythontex()"
snippet frs "read file as string"
with open(${1:filename}, 'r', encoding="utf-8") as f:
	${2:content} = f.read()
endsnippet

context "pythontex()"
snippet frl "read file as list"
with open(${1:filename}, 'r', encoding="utf-8") as f:
	${2:lines} = ${3:[}line.strip() for line in f.readlines() if line.strip()${4:]}
endsnippet

context "pythontex()"
snippet fw "override file"
with open(${1:filename}, '${2:w}', encoding="utf-8") as f:
	f.write(${3:content})
endsnippet

context "pythontex()"
snippet ,f "=" wA
= $1
endsnippet

snippet c2t "call csv2table()" b
\\begin\{pycode}
import pandas as pd
fn = "${1:<<>>}"
args = \{
	"position": "htbp",
	"position_float": "centering",
	"hrules": True,
	"caption": "${2:<<>>}",
	"label": "tab:${3:<<>>}",
}
table = csv2table(fn, args)
print(table)
\\end\{pycode}
endsnippet
